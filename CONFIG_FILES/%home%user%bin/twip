#!/usr/bin/perl
#######################################################################
# Twip - TWitter IP utility
# Main script; has all core functionality for sending/receiving
#
# Twip is for sending and retrieving IP addresses to/from twitter.
# Intended to serve as a makeshift replacement for dynamic DNS
#
# Encrypts IPs weakly using OpenPGP `gpg'
# Sends data using the Twitter API through Net::Twitter
#
# Copyright (c) 2010 Elliot Wolk
#
# Essentially a wrapper around Net::Twitter, which is:
#   Copyright (c) 2009 Marc Mims
#
# The Twitter API itself is:
#   Copyright (c) 2009 Twitter
#
# This script is licensed under GNU GPL version 3.0 or above
#######################################################################
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################
use strict;
use warnings;
use Getopt::Long;
use Net::Twitter;

my $nt;

my ($accessToken, $accessTokenSecret, $consumerKey, $consumerSecret);
my ($userID, $screenName);

sub getIP(){
  return `wget http://whatismyip.org -q -O -`;
}
sub encryptIP($){
  my $ip = shift;
  my $block = `echo '$ip' | gpg --no-use-agent -q -a --symmetric --passphrase "gpgkey_$accessTokenSecret"`;
  $block =~ s/^-----BEGIN PGP MESSAGE-----\n.*\n\n//;
  $block =~ s/\n-----END PGP MESSAGE-----\n*$//;
  $block =~ s/!/!!!/g;
  $block =~ s/\+/!p!/g;
  $block =~ s/ /!s!/g;
  $block =~ s/\t/!t!/g;
  $block =~ s/\n/!n!/g;
  return $block;
}
sub decryptIP($){
  my $enc = shift;
  $enc =~ s/[+ \t\n]//g;
  
  $enc =~ s/!n!/\n/g;
  $enc =~ s/!t!/\t/g;
  $enc =~ s/!s!/ /g;
  $enc =~ s/!p!/+/g;
  $enc =~ s/!!!/!/g;
  
  my $block = "-----BEGIN PGP MESSAGE-----\n";
  $block .= "Version: GnuPG v1.4.9 (GNU/Linux)\n";
  $block .= "\n";
  $block .= $enc;
  $block .= "\n-----END PGP MESSAGE-----";
  my $cmd = "echo '$block' | gpg --no-use-agent --no-mdc-warning ".
    "-q -d --passphrase \"gpgkey_$accessTokenSecret\"";

  return `$cmd`;
}

sub authorize(){
  $nt = Net::Twitter->new(
      traits          => ['API::REST', 'API::Search', 'OAuth'],
      consumer_key    => $consumerKey,
      consumer_secret => $consumerSecret,
  );

  if ($accessToken && $accessTokenSecret) {
      $nt->access_token($accessToken);
      $nt->access_token_secret($accessTokenSecret);
  }

  unless ( $nt->authorized ) {
    # The client is not yet authorized: Do it now
    print "Authorize this app at ",
      $nt->get_authorization_url,
      " and enter the PIN#\n";

    my $pin = <STDIN>;
    chomp $pin;

    ($accessToken, $accessTokenSecret, $userID, $screenName) =
      $nt->request_access_token(verifier => $pin);
  }

  return $nt->authorized;
}

my $usage =
"Usage: $0 [options..]
Options:
 --config  Use this config file; defaults to ~/.twip
 --ip      Uses this IP instead of fetching from whatismyip.org
           For use in --put
 -a/--all  Fetches as many tweets as possible and decrypts them all
           For use in --get
 -g/--get  Fetch the most recent tweet and decrypt it to an IP
           (exactly one of get, put, or decrypt is required)
 -p/--put  Obtain the external IP, encrypt it mildly, and tweet it
           (exactly one of get, put, or decrypt is required)
 --decrypt Instead of fetching, use this encrypted block,
           perhaps copied from twitter, and decrypt it directly
           (exactly one of get, put, or decrypt is required)
 -h/--help Show this message
";

my ($configFile, $useIP, $all, $get, $put, $decrypt, $help);
my $result = GetOptions(
  "config=s"  => \$configFile,
  "ip=s"      => \$useIP,
  "all|a"     => \$all,
  "get|g"     => \$get,
  "put|p"     => \$put,
  "decrypt=s" => \$decrypt,
  "h|help"    => \$help,
);
if($help or not $result){
  print $usage;
  exit $result;
}

$configFile = '~/.twip' if(not defined $configFile);
$configFile = `echo $configFile`;
chomp $configFile;

open FH, "< $configFile" or die "Could not open $configFile for reading";
while(my $line = <FH>){
  chomp $line;
  next if $line =~ /^[ \t\n]*$/;
  next if $line =~ /^ *#/;
  if($line !~ /^([a-zA-Z_]+)[ \t\n]*=[ \t\n]*(.*)$/){
    die "Malformed config file line: $line";
  }
  my $key = uc $1;
  my $val = $2;
  if($key eq 'TWITTER_OAUTH_ACCESS_TOKEN'){
    $accessToken = $val;
  }elsif($key eq 'TWITTER_OAUTH_ACCESS_TOKEN_SECRET'){
    $accessTokenSecret = $val;
  }elsif($key eq 'TWITTER_OAUTH_CONSUMER_KEY'){
    $consumerKey = $val;
  }elsif($key eq 'TWITTER_OAUTH_CONSUMER_SECRET'){
    $consumerSecret = $val;
  }else{
    die "Unknown config file item: $1";
  }
}
close FH;


my @auth = authorize;
if(not $auth[0]){
  die "Could not authorize";
}

open FH, "> $configFile" or die "Could not open $configFile for writing";
print FH
"TWITTER_OAUTH_ACCESS_TOKEN=$accessToken
TWITTER_OAUTH_ACCESS_TOKEN_SECRET=$accessTokenSecret
TWITTER_OAUTH_CONSUMER_KEY=$consumerKey
TWITTER_OAUTH_CONSUMER_SECRET=$consumerSecret
";
close FH;

if(defined $get and not defined $put and not defined $decrypt){
  if(defined $useIP){
    die $usage;
  }

  my @statuses = @{$nt->friends_timeline};
  if(@statuses <= 0){
    print "No statuses found!\n";
  }elsif(not defined $all){
    print decryptIP $statuses[0]->{text};
  }else{
    for my $status(@statuses){
      my $ip = decryptIP $status->{text};
      chomp $ip;
      my $date = $status->{created_at};
      print "$ip - $date\n";
    }
  }
}elsif(defined $put and not defined $get and not defined $decrypt){
  if(defined $all){
    die $usage;
  }
  $useIP = getIP if not defined $useIP;
  
  my $msg = encryptIP $useIP;
  $nt->update({ status => $msg });
}elsif(defined $decrypt and not defined $get and not defined $put){
  print decryptIP $decrypt;
}else{
  die $usage;
}

