#!/usr/bin/perl
use strict;
use warnings;

my $tetherExec = `echo -n \$HOME/Desktop/N900/config/n900-tether`;

#normally, the usb mac is randomly generated, but you can make it be
# the same each time. this script assumes you do so, since its really
# convenient. {this one was randomly generated by an n900}
#echo options g_nokia host_addr=42:C6:65:AC:8B:BD > /etc/modprobe.d/g_nokia
my $USB_MAC = '42:c6:65:ac:8b:bd';
my $USB_PC_IP = '192.168.2.14';
my $USB_N900_IP = '192.168.2.15';
my $MOBILE_HOTSPOT_IP = '10.248.140.1';
my $N900_HOSTNAME = 'wolke-n900';
my $TMP_IP_FILE = `echo -n \$HOME/.n900-tmp-ip`;
my $SSID_IPS = {
  flipsafad => '192.168.11.29',
  minerva => $MOBILE_HOTSPOT_IP,
  mobilehotspot => $MOBILE_HOTSPOT_IP,
  jimbo => '192.168.2.8',
};

my $usage = "Usage:
  $0 [OPTS]
    Guess the IP of the n900 on lan/hotspot/usb {reads ifconfig} and print it
  $0 [OPTS] -s|--ssh [CMD]
    Guess the IP of the n900 on lan/hotspot/usb {reads ifconfig} and run ssh
    The rest of the command line after --ssh is the CMD to be run, if any
  $0 -t|--tether [on|off|toggle]
    Instead of fetching an IP address, run below command {default is toggle}
    $tetherExec [on|off|toggle]

  OPTS can be:
    -u   only try usb
    -w   try wireless LAN and hotspot first {USB is tried first by default}
";

sub pcSuiteMode();
sub getSSID();
sub wireless(){
  my $ssid = getSSID;
  for my $key(keys %$SSID_IPS){
    if($key eq $ssid){
      return $$SSID_IPS{$key};
    }
  }
  return undef;
}

sub main(@){
  my $dest = undef;
  my $sshCmd = undef;
  
  if((@_ == 1 or @_ == 2) and
     ($_[0] eq '-t' or $_[0] eq '--tether') and
     (@_ == 1 or $_[1] eq 'on' or $_[1] eq 'off' or $_[1] eq 'toggle')){
    my $arg = @_ == 2 ? $_[1] : '';
    system "sudo -b $tetherExec $arg";
    exit 0;
  }

  if(@_ > 0 and $_[0] eq '-u'){
    pcSuiteMode();
    $dest = $USB_N900_IP;
    shift;
  }
  if(@_ > 0 and $_[0] eq '-w'){
    $dest = wireless();
    shift;
  }

  if(@_ > 0 and ($_[0] eq '-s' or $_[0] eq '--ssh')){
    $sshCmd = '';
    for my $arg(@_[1..$#_]){
      $arg =~ s/"/"\\""/g;
      $sshCmd .= "\"$arg\" ";
    }
  }elsif(@_ > 0){
    die $usage;
  }
  $dest = tmpIp() if not defined $dest;
  if(pcSuiteMode() and not defined $dest){
    $dest = $USB_N900_IP;
  }elsif(not defined $dest){
    $dest = wireless();
  }
  $dest = "$N900_HOSTNAME.local" if not defined $dest;
  if(defined $sshCmd){
    system 'ssh', "root\@$dest", $sshCmd;
  }else{
    print $dest;
  }
}

sub tmpIp(){
  if(-e $TMP_IP_FILE){
    my $ip = `cat $TMP_IP_FILE`;
    $ip =~ s/[^\.0-9]+//g;
    if(length $ip > 0){
      return $ip;
    }else{
      return undef;
    }
  }else{
    return undef;
  }
}

sub pcSuiteMode(){
  my $ifconfig = `ifconfig -a`;
  if($ifconfig =~ /^([a-z0-9_]+).*$USB_MAC\s*$/mi){
    my $dev = $1;
    $ifconfig = `ifconfig $dev`;
    if($ifconfig !~ /inet addr:$USB_PC_IP/){
      system "sudo ifconfig $dev $USB_PC_IP netmask 255.255.255.0 up";
      print STDERR "USB DEVICE UP\n";
    }
    return 1;
  }else{
    return 0;
  }
}

sub getSSID(){
  my $nm = `nm-tool 2>/dev/null`;
  if($nm =~ /
      \s* Device: \s* wlan[0-9]* (.*) \n
      (?:.*\n)*?
      \s* State: \s* (.*) \n
      /xi
  ){
    if($2 eq 'connected'){
      my $ssid = $1;
      $ssid =~ /
        ^\s*
        \[  (?:auto)? \s* ([^\]]*)  \]
        \s* -* $/xi;
      $ssid = lc $1;
      return $ssid;
    }
  }else{
    return '';
  }
}

&main(@ARGV);

