#!/usr/bin/perl
use strict;
use warnings;

sub termKeys($);
sub gconfGetCmd($);
sub gconfSetCmd($$$$);
sub listInt($);
sub listString($);

my $display = '/system/osso/dsm/display';
my $desktop = '/apps/osso/hildon-desktop';
my $xterm = '/apps/osso/xterm';
my $hotspot = '/apps/mobilehotspot';

my %gconf = (
  "$display/display_dim_timeout" => [240, 'int'],
  "$display/possible_display_dim_timeouts" =>
    listInt [15, 30, 60, 120, 180, 240],

  "$desktop/ui_can_rotate"             => ["false", "bool"],
  "$desktop/desktop_orientation_lock"  => ["true", "bool"],

  "$xterm/keys" => listString [termKeys 'keys'],
  "$xterm/key_labels" => listString [termKeys 'labels'],

  "$hotspot/ssid"            => ["Minerva"],
  "$hotspot/encryption_algo" => ["WEP"],
  "$hotspot/encryption_key"  => ["WISDOMS_LOGOS"],
  "$hotspot/connection_name" => ["T-Mobile Internet"],
  "$hotspot/interface_name"  => ["WLAN"],
  "$hotspot/network_address" => ["10.248.140."],
  "$hotspot/state_pickle"    => [""],
);

sub termKeys($){
  my @termKeys = (
    ['Tab' => 'Tab'],
    ['Esc' => 'Escape'],
    ['~'   => 'asciitilde'],
    ['|'   => 'bar'],
    ['<'   => 'less'],
    ['>'   => 'greater'],
    ['^'   => 'asciicircum'],
    ['\`'  => 'grave'],
    ['\{'  => 'braceleft'],
    ['\}'  => 'braceright'],
    ['\['  => 'bracketleft'],
    ['\]'  => 'bracketright'],
    ['pgU' => 'Prior'],
    ['pgD' => 'Next'],
    ['Ent' => 'Return'],
  );

  die "termKeys(labels) or termKeys(keys)\n" if $_[0] !~ /^(labels|keys)$/;
  my $evenOdd = $_[0] eq 'labels' ? 0 : 1;
  return map {${$_}[$evenOdd]} @termKeys;
}

sub main(@){
  die "Usage: $0\n" if @_ > 0;
  my @cmds = ();
  for my $key(keys %gconf){
    my @arr = @{$gconf{$key}};
    my $val = shift @arr;
    my $type = @arr > 0 ? shift @arr : 'string';
    my $listType = @arr > 0 ? shift @arr : undef;
    push @cmds, "echo -n \"$key| NEW: $val OLD: \"";
    push @cmds, gconfGetCmd($key);
    push @cmds, gconfSetCmd($key, $val, $type, $listType);
  }
  my $cmd = join "\n", @cmds;
  print "$cmd\n\n";
  system "n900", "-s", $cmd;
}

sub gconfGetCmd($){
  return "gconftool-2 --get $_[0]";
}
sub gconfSetCmd($$$$){
  my ($key, $val, $type, $listType) = @_;
  my $cmd = "gconftool-2 --set '$key' '$val' --type=$type";
  if(lc $type eq 'list'){
    $cmd .= " --list-type=$listType";
  }
  return $cmd;
}

sub listInt($){
  my @list = @{shift()};
  my $val = '[' . (join ',', @list) . ']';
  return [$val, 'list', 'int'];
}
sub listString($){
  my @list = @{shift()};
  my $val = '[' . (join ',', @list) . ']';
  return [$val, 'list', 'string'];
}

&main(@ARGV);
